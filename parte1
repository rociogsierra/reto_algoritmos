
#problema de los movimientos de caballo de ajedrez
#seg√∫n el documento propuesto:

PENSAMIENTO_ALGORITMICO = {
    1: (6,8),
    2: (7,9),
    3: (4,8),
    4: (3,9,0),
    5: tuple(),
    6: (1,7,0),
    7: (2,6),
    8: (1,3),
    9: (2,4),
    0: (4,6)
}

def pensamientos(posicion):
    return PENSAMIENTO_ALGORITMICO

def producir_secuencia(posicion_inicial, num_saltos, secuencia = None):
    if secuencia is None:
        secuencia = [posicion_inicial]
    if num_saltos == 0:
        yield secuencia
        return 

    for pensamiento in pensamientos(posicion_inicial):
        yield from producir_secuencia(pensamiento, num_saltos -1, secuencia + [pensamiento])

def contar_secuencia(num_saltos):
    num_de_secuencias = 0
    for primer_posible_numero in [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]:
        for secuencia in producir_secuencia(primer_posible_numero, num_saltos):
            num_de_secuencias += 1
    return num_de_secuencias

for salto in [1, 2, 3, 5, 8, 10, 15, 18, 21, 23, 32]:
    valor_posible = contar_secuencia(num_saltos = salto)
    print("{} movimientos, y {} valores posibles").format(salto, valor_posible)



