
#apuntes tomados en clase
#problema del numero de reinas

numero_de_reinas = 6
contador = 0
columna = [False]*numero_de_reinas

diagonal_izq = [False]*(numero_de_reinas*2)
diagonal_der = [False]*(numero_de_reinas*2)
resultado = []

#definimos la funci√≥n

def backtrack(y, numero_de_reinas, contador):
    
    if (y == numero_de_reinas):
        return contador + 1
    
    for i in range(numero_de_reinas):
        global columna
        global diagonal_izq
        global diagonal_der

        if(columna[i] or diagonal_izq[i + y] or diagonal_der[i - y + numero_de_reinas - 1]):
            continue
        
        columna[i] = diagonal_izq[i + y] = diagonal_der[i - y + numero_de_reinas - 1]
        resultado.append((i, y))
        
        contador = backtrack(y + 1, numero_de_reinas, contador)

        if contador != 0:
            return contador

solucion_que_obtenemos = backtrack(0, numero_de_reinas, contador)
solucion_final = [pos[1] for pos in sorted(resultado, key = lambda i: i[0])]

print(solucion_final)







